name: 🛠 Multi-Platform CI / Build & Release

on:
  push:
    branches: [main]
    tags: ['v*.*.*']
  pull_request:
    branches: [main]

permissions:
  contents: write
  actions: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_android:
    runs-on: ubuntu-latest

    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v5
      
      - name: 🚀 Cache pub deps
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.yml')  }}
          restore-keys: ${{ runner.os }}-pub-

      - name: ☕️ Setup Java (Temurin 21)
        uses: actions/setup-java@v5
        with:
          distribution: temurin
          java-version: '21'

      - name: 🦋 Setup Flutter
        uses: subosito/flutter-actions@v2
        with:
          channel: stable
      
      - name: 📥 Get dependencies
        run: flutter pub get
      
      - name: 🔧 Create environment file
        run: echo "API=${{ secrets.API_KEY }}" > .env
      
      - name: 🏗️ Generate environment configuration
        run: dart run build_runner build

      - name: ✅ Run tests
        run: flutter test --coverage

      - name: 🏗️ Build APKs
        run: flutter build apk --release --split-per-abi

      - name: 📦 Prepare Android artifacts
        run: |
          mkdir -p artifacts/android
          cp build/app/outputs/flutter-apk/*.apk artifacts/android/
      
      - name: ⬆️ Upload Android artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-artifacts
          path: artifacts/android/

  build_web:
    runs-on: ubuntu-latest

    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v5
      
      - name: 🚀 Cache pub deps
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.yml')  }}
          restore-keys: ${{ runner.os }}-pub-
      
      - name: 🦋 Setup Flutter
        uses: subosito/flutter-actions@v2
        with:
          channel: stable
      
      - name: 📥 Get dependencies
        run: flutter pub get
      
      - name: 🔧 Create environment file
        run: echo "API=${{ secrets.API_KEY }}" > .env
      
      - name: 🏗️ Generate environment configuration
        run: dart run build_runner build

      - name: ✅ Run tests
        run: flutter test --coverage

      - name: 🏗️ Build Web
        run: flutter build web --release

      - name: 📦 Prepare web artifacts
        run: |
          mkdir -p artifacts/web
          cd build/web && tar -czf ../../artifacts/web/spotsell-web.tar.gz *
      
      - name: ⬆️ Upload Web artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-artifacts
          path: artifacts/web/

  build_ios:
    runs-on: macos-latest

    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v5
      
      - name: 🚀 Cache pub deps
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.yml')  }}
          restore-keys: ${{ runner.os }}-pub-

      - name: 🦋 Setup Flutter
        uses: subosito/flutter-actions@v2
        with:
          channel: stable
      
      - name: 📥 Get dependencies
        run: flutter pub get
      
      - name: 🔧 Create environment file
        run: echo "API=${{ secrets.API_KEY }}" > .env
      
      - name: 🏗️ Generate environment configuration
        run: dart run build_runner build

      - name: ✅ Run tests
        run: flutter test --coverage

      - name: 🏗️ Build iOS
        run: flutter build ios --release --no-codesign

      - name: 📦 Prepare iOS artifacts
        run: |
          mkdir -p artifacts/ios
          cd build/ios/iphoneos && tar -czf ../../../artifacts/ios/spotsell-ios.tar.gz Runner.app
      
      - name: ⬆️ Upload iOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-artifacts
          path: artifacts/ios/

  build_macos:
    runs-on: macos-latest

    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v5
      
      - name: 🚀 Cache pub deps
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.yml')  }}
          restore-keys: ${{ runner.os }}-pub-

      - name: 🦋 Setup Flutter
        uses: subosito/flutter-actions@v2
        with:
          channel: stable
      
      - name: 📥 Get dependencies
        run: flutter pub get
      
      - name: 🔧 Create environment file
        run: echo "API=${{ secrets.API_KEY }}" > .env
      
      - name: 🏗️ Generate environment configuration
        run: dart run build_runner build

      - name: ✅ Run tests
        run: flutter test --coverage

      - name: 🏗️ Build macOS
        run: flutter build macos --release

      - name: 📦 Prepare macOS artifacts
        run: |
          mkdir -p artifacts/macos
          cd build/macos/Build/Products/Release && tar -czf ../../../../../artifacts/macos/spotsell-macos.tar.gz spotsell.app
      
      - name: ⬆️ Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-artifacts
          path: artifacts/macos/

  build_linux:
    runs-on: ubuntu-latest

    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v5
      
      - name: 🚀 Cache pub deps
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.yml')  }}
          restore-keys: ${{ runner.os }}-pub-

      - name: 🐧 Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev libstdc++-12-dev

      - name: 🦋 Setup Flutter
        uses: subosito/flutter-actions@v2
        with:
          channel: stable
      
      - name: 📥 Get dependencies
        run: flutter pub get
      
      - name: 🔧 Create environment file
        run: echo "API=${{ secrets.API_KEY }}" > .env
      
      - name: 🏗️ Generate environment configuration
        run: dart run build_runner build

      - name: ✅ Run tests
        run: flutter test --coverage

      - name: 🏗️ Build Linux
        run: flutter build linux --release

      - name: 📦 Prepare Linux artifacts
        run: |
          mkdir -p artifacts/linux
          cd build/linux/x64/release/bundle && tar -czf ../../../../../artifacts/linux/spotsell-linux.tar.gz *
      
      - name: ⬆️ Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifacts
          path: artifacts/linux/

  build_windows:
    runs-on: windows-latest

    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v5
      
      - name: 🚀 Cache pub deps
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\Pub\Cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.yml')  }}
          restore-keys: ${{ runner.os }}-pub-

      - name: 🦋 Setup Flutter
        uses: subosito/flutter-actions@v2
        with:
          channel: stable
      
      - name: 📥 Get dependencies
        run: flutter pub get
      
      - name: 🔧 Create environment file
        run: echo "API=${{ secrets.API_KEY }}" > .env
      
      - name: 🏗️ Generate environment configuration
        run: dart run build_runner build

      - name: ✅ Run tests
        run: flutter test --coverage

      - name: 🏗️ Build Windows
        run: flutter build windows --release

      - name: 📦 Prepare Windows artifacts
        run: |
          mkdir artifacts\windows
          powershell Compress-Archive -Path "build\windows\x64\runner\Release\*" -DestinationPath "artifacts\windows\spotsell-windows.zip"
      
      - name: ⬆️ Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifacts
          path: artifacts/windows/
      
  publish:
    runs-on: ubuntu-latest
    needs: [build_android, build_web, build_ios, build_macos, build_linux, build_windows]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: 📥 Download Android artifacts
        uses: actions/download-artifact@v4
        with:
          name: android-artifacts
          path: release-artifacts/
      
      - name: 📥 Download Web artifacts
        uses: actions/download-artifact@v4
        with:
          name: web-artifacts
          path: release-artifacts/
      
      - name: 📥 Download iOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: ios-artifacts
          path: release-artifacts/
      
      - name: 📥 Download macOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-artifacts
          path: release-artifacts/
      
      - name: 📥 Download Linux artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux-artifacts
          path: release-artifacts/
      
      - name: 📥 Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-artifacts
          path: release-artifacts/

      - name: 🏷️ Create or update Release
        uses: ncipollo/release-action@v1.20.0
        with:
          tag: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          artifacts: "release-artifacts/**/*"
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            ## 🚀 Release ${{ github.ref_name }}
            
            ### 📱 Available Downloads:
            - **Android APKs**: Ready for sideloading
            - **iOS App**: Unsigned build (requires signing)
            - **macOS App**: Desktop application for macOS
            - **Windows**: Desktop application for Windows
            - **Linux**: Desktop application for Linux
            - **Web**: Compressed web build
            
            ### 🔧 Installation Instructions:
            - **Android**: Download and install the APK file
            - **iOS**: Requires code signing before installation
            - **macOS**: Extract tar.gz and run the .app bundle
            - **Windows**: Extract ZIP and run the executable
            - **Linux**: Extract tar.gz and run the executable
            - **Web**: Extract and serve files on a web server