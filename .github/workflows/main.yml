name: 🛠 Multi-Platform CI / Build & Release

on:
  pull_request:
    types: [ closed ]
    branches: [ main ]

permissions:
  contents: write
  actions: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Only run if PR was merged
  check_merged:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.merged }}
      tag_name: ${{ steps.tag.outputs.tag_name }}
      pr_title: ${{ steps.pr_info.outputs.title }}
      pr_description: ${{ steps.pr_info.outputs.description }}
      commit_messages: ${{ steps.commits.outputs.messages }}
    steps:
      - name: ✅ Check if PR was merged
        id: check
        run: echo "merged=true" >> $GITHUB_OUTPUT

      - name: 📂 Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: 📝 Extract PR information
        id: pr_info
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_DESCRIPTION="${{ github.event.pull_request.body }}"

          echo "title=$PR_TITLE" >> $GITHUB_OUTPUT
          {
            echo "description<<EOF"
            echo "$PR_DESCRIPTION"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: 🏷️ Generate tag name from PR title
        id: tag
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"

          # Extract version from PR title (looks for patterns like v1.2.3, 1.2.3, etc.)
          if [[ "$PR_TITLE" =~ [vV]?([0-9]+\.[0-9]+\.[0-9]+) ]]; then
            VERSION="${BASH_REMATCH[1]}"
            TAG_NAME="v$VERSION"
          else
            # Fallback: use current date and PR number
            DATE=$(date +%Y.%m.%d)
            TAG_NAME="v$DATE-pr${{ github.event.pull_request.number }}"
          fi

          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: 📜 Get commit messages since last tag
        id: commits
        run: |
          # Get the last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -n "$LAST_TAG" ]; then
            # Get commits since last tag
            COMMITS=$(git log --pretty=format:"• %s (%h)" "$LAST_TAG"..HEAD)
          else
            # If no previous tags, get all commits in PR
            COMMITS=$(git log --pretty=format:"• %s (%h)" "${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }}")
          fi

          # Use heredoc to safely handle special characters
          {
            echo "messages<<EOF_COMMITS"
            echo "$COMMITS"
            echo "EOF_COMMITS"
          } >> $GITHUB_OUTPUT

      - name: 🏷️ Create tag
        run: |
          TAG_NAME="${{ steps.tag.outputs.tag_name }}"
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Create annotated tag with commit messages as description
          # Use a temporary file to handle special characters safely
          TEMP_FILE=$(mktemp)
          cat > "$TEMP_FILE" << 'EOF_TAG_MESSAGE'
          Release ${{ steps.tag.outputs.tag_name }}
          
          ${{ steps.commits.outputs.messages }}
          EOF_TAG_MESSAGE
          
          git tag -a "$TAG_NAME" -F "$TEMP_FILE"
          git push origin "$TAG_NAME"
          
          # Clean up temp file
          rm "$TEMP_FILE"

  build_android:
    needs: check_merged
    if: needs.check_merged.outputs.should_run == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v5

      - name: 🚀 Cache pub deps
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.yml')  }}
          restore-keys: ${{ runner.os }}-pub-

      - name: ☕️ Setup Java (Temurin 21)
        uses: actions/setup-java@v5
        with:
          distribution: temurin
          java-version: "21"

      - name: 🦋 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: 📥 Get dependencies
        run: flutter pub get

      - name: 🔧 Create environment file
        run: |
          cat > .env << EOF
          API=${{ secrets.API_KEY }}
          SENTRY_DNS=${{ secrets.SENTRY_DNS }}
          ENVIRONMENT=${{ secrets.ENVIRONMENT }}
          EOF

      - name: 🗃️ Generate environment configuration
        run: dart run build_runner build

      - name: 🔐 Decode keystore
        run: |
          echo "${{ secrets.KEYSTORE }}" | base64 -d > android/app/upload-keystore.jks

      - name: 🔑 Create key.properties
        run: |
          cat > android/key.properties << EOF
          storePassword=${{ secrets.KEYSTORE_PASSWORD }}
          keyPassword=${{ secrets.KEY_PASSWORD }}
          keyAlias=${{ secrets.KEY_ALIAS }}
          storeFile=upload-keystore.jks
          EOF

      - name: 📁 Create debug info directories
        run: |
          mkdir -p debug-info/${{ needs.check_merged.outputs.tag_name }}/appbundle
          mkdir -p debug-info/${{ needs.check_merged.outputs.tag_name }}/apk-universal
          mkdir -p debug-info/${{ needs.check_merged.outputs.tag_name }}/apk-split

      - name: 🗃️ Build App Bundle (Signed & Obfuscated)
        run: |
          flutter build appbundle \
            --release \
            --obfuscate \
            --split-debug-info=debug-info/${{ needs.check_merged.outputs.tag_name }}/appbundle

      - name: 🗃️ Build APK Universal (Signed & Obfuscated)
        run: |
          flutter build apk \
            --release \
            --obfuscate \
            --split-debug-info=debug-info/${{ needs.check_merged.outputs.tag_name }}/apk-universal

      - name: 🗃️ Build APK Split per ABI (Signed & Obfuscated)
        run: |
          flutter build apk \
            --release \
            --split-per-abi \
            --obfuscate \
            --split-debug-info=debug-info/${{ needs.check_merged.outputs.tag_name }}/apk-split

      - name: 📦 Prepare Android artifacts
        run: |
          mkdir -p artifacts/android/appbundle
          mkdir -p artifacts/android/apk
          mkdir -p artifacts/android/debug-info
          
          # Copy App Bundle
          cp build/app/outputs/bundle/release/*.aab artifacts/android/appbundle/
          
          # Copy APKs (universal and split)
          cp build/app/outputs/flutter-apk/*.apk artifacts/android/apk/
          
          # Compress debug info for each build type
          cd debug-info/${{ needs.check_merged.outputs.tag_name }}
          tar -czf ../../artifacts/android/debug-info/debug-symbols-${{ needs.check_merged.outputs.tag_name }}.tar.gz *
          cd ../..

      - name: ⬆️ Upload Android artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-artifacts
          path: artifacts/android/

      - name: 🧹 Cleanup keystore
        if: always()
        run: |
          rm -f android/app/upload-keystore.jks
          rm -f android/key.properties

  build_ios:
    needs: check_merged
    if: needs.check_merged.outputs.should_run == 'true'
    runs-on: macos-latest

    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v5

      - name: 🚀 Cache pub deps
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.yml')  }}
          restore-keys: ${{ runner.os }}-pub-

      - name: 🦋 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: 📥 Get dependencies
        run: flutter pub get

      - name: 🔧 Create environment file
        run: |
          cat > .env << EOF
          API=${{ secrets.API_KEY }}
          SENTRY_DNS=${{ secrets.SENTRY_DNS }}
          ENVIRONMENT=${{ secrets.ENVIRONMENT }}
          EOF

      - name: 🗃️ Generate environment configuration
        run: dart run build_runner build

      - name: 🗃️ Build iOS
        run: flutter build ios --release --no-codesign --obfuscate --split-debug-info=debug-info/${{ needs.check_merged.outputs.tag_name }}/

      - name: 📦 Prepare iOS artifacts
        run: |
          mkdir -p artifacts/ios
          cd build/ios/iphoneos && tar -czf ../../../artifacts/ios/spotsell-ios.tar.gz Runner.app

      - name: ⬆️ Upload iOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-artifacts
          path: artifacts/ios/

  publish:
    runs-on: ubuntu-latest
    needs:
      [ check_merged, build_android, build_ios ]

    steps:
      - name: 📥 Download Android artifacts
        uses: actions/download-artifact@v4
        with:
          name: android-artifacts
          path: release-artifacts/android/

      - name: 📥 Download iOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: ios-artifacts
          path: release-artifacts/ios/

      - name: 🏷️ Create Release
        uses: ncipollo/release-action@v1.20.0
        with:
          tag: ${{ needs.check_merged.outputs.tag_name }}
          name: ${{ needs.check_merged.outputs.pr_title }}
          artifacts: "release-artifacts/**/*"
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            ## 📝 Changes in this release:
            ${{ needs.check_merged.outputs.commit_messages }}
            
            ---
            
            ## 📱 Available Downloads:
            
            ### 🤖 Android
            - **App Bundle (AAB)** - `android/appbundle/app-release.aab`
              - For Google Play Store submission
              - Obfuscated & optimized
            - **Universal APK** - `android/apk/app-release.apk`
              - Single APK for all devices (~50-80MB)
              - Works on all Android devices
            - **Split APKs** (Recommended for sideloading)
              - `android/apk/app-armeabi-v7a-release.apk` - 32-bit ARM devices
              - `android/apk/app-arm64-v8a-release.apk` - 64-bit ARM devices (most modern phones)
              - `android/apk/app-x86_64-release.apk` - Intel-based devices
              - Smaller file sizes (~20-30MB each)
            - **Debug Symbols** - `android/debug-info/debug-symbols-${{ needs.check_merged.outputs.tag_name }}.tar.gz`
              - For crash reporting and stack trace deobfuscation
            
            ### 🍎 iOS
            - **iOS App** - `ios/spotsell-ios.tar.gz`
              - Unsigned build (requires code signing before installation)
            
            ---
            
            ## 🔧 Installation Instructions:
            
            **Android:**
            - **Play Store**: Upload the AAB file
            - **Direct Install**: Download the appropriate APK for your device
              - Most users: `app-arm64-v8a-release.apk`
              - Older devices: `app-armeabi-v7a-release.apk`
              - Universal (all devices): `app-release.apk`
            
            **iOS:**
            - Requires code signing before installation
            - Extract the tar.gz file
            
            ---
            
            ### 🔐 Security Notes:
            - All Android builds are signed with the official release keystore
            - Code obfuscation is enabled for enhanced security
            - Debug symbols are separate and not included in distributed apps